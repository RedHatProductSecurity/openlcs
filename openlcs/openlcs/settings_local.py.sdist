# Local settings goes here.
# =========================

# $ cp settings_local.py.sdist settings_local.py
# Feel free to customize your settings_local.py, changes will be
# populated automatically.

"""
Django settings for OpenLCS project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
REPO_DIR = os.path.dirname(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8c4w#_a7k&1^!#+af%unwddrcc0=og^j7k@n*gjxm$^8b#tzdm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Used to identify namespace for restful api endpoints.
DRF_NAMESPACE = 'rest'
DRF_API_VERSION = 'v1'

# Change hostname to actual hostname.
HOSTNAME = '127.0.0.1:8000'
REST_API_PATH = f'http://{HOSTNAME}/{DRF_NAMESPACE}/{DRF_API_VERSION}'
BROWSABLE_DOCUMENT_MACROS = {
    # need to be rewritten with the real host name when deploy.
    'HOST_NAME': f'http://{HOSTNAME}',
    # make consistent with rest api root.
    'API_PATH': f'{DRF_NAMESPACE}/{DRF_API_VERSION}',
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('OPENLCS_DB', 'openlcs'),
        'USER': 'openlcs',
        'PASSWORD': '',
        'HOST': 'localhost',
    }
}
CELERY_RESULT_BACKEND = 'db+postgresql://{USER}:{PASSWORD}@{HOST}/{NAME}'\
    .format(**DATABASES.get('default'))

LOGGER_DIR = os.path.join(REPO_DIR, 'logs')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
    },
    'handlers': {
        'stderr': {
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stderr',
        }
    },
    'loggers': {
        '': {
            'handlers': ['stderr'],
            'level': 'INFO',
            'propagate': False
        },
        'django': {
            'propagate': True,
        }
    }
}

STATIC_ROOT = os.path.join(REPO_DIR, 'collect_static')

if DEBUG:
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_COLLAPSED': True,
        'SHOW_TOOLBAR_CALLBACK': lambda x: True,
    }

SRC_ROOT_DIR = os.path.join(REPO_DIR, 'sources')
if not os.path.exists(SRC_ROOT_DIR):
    os.mkdir(SRC_ROOT_DIR)
RETRY_DIR = os.path.join(SRC_ROOT_DIR, 'retry')
TMP_ROOT_DIR = os.path.join(SRC_ROOT_DIR, 'tmp')
POST_DIR = os.path.join(SRC_ROOT_DIR, 'post')

# Set paths to scancode. Assumes virtualenv
SCANCODE_CLI = os.path.expandvars('$VIRTUAL_ENV/bin/scancode')
EXTRACTCODE_CLI = os.path.expandvars('$VIRTUAL_ENV/bin/extractcode')


# Appropriate permissions will be granted for below nodes.
# Ideally the list should be hostnames of worker nodes.
WORKER_NODES = [
    # 'openlcs-dev-worker01',
]

# Use backend for database password-based auth
# Production uses 'utils.backends.ModAuthKerbBackend'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]
