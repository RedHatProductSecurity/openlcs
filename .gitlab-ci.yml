stages:
  # Build ci-image if dockerfile changed
  - build-ci-image

  # Run static analysis tools
  # build PELC2 image
  - static-analysis-build

  # Run unit and functional tests that do not require fully deployed PELC
  # Run integration tests
  # Deploy master branch to pelc-dev
  - tests-it-promote

  # Release new ci-image when merged
  - release-ci

variables:
  PELC_DATABASE_USER: postgres
  PELC_DATABASE_PASSWORD: test
  POSTGRESQL_ADMIN_PASSWORD: $DATABASE_PASSWORD
  OCP_ADDRESS: https://api.ocp-c1.prod.psi.redhat.com:6443

.ci-image: &ci-image
  # this image is built from openshift https://console-openshift-console.apps.ocp-c1.prod.psi.redhat.com/k8s/ns/pelc-ci-cd/buildconfigs/pelc2-gitlab-ci
  image:
    name: quay.io/pelc/pelc2-ci:latest
  # the tags come from the labels of shared runner in 'gitlab.cee.redhat.com/pelc/pelc2/-/settings/ci_cd'
  tags:
    - docker
    - shared

.postgresql: &postgresql
  services:
    - 'quay.io/pelc/postgresql-12'

## Currently public runner no cache server
#.pip-cache: &pip-cache
#  cache:
#    # all branches and jobs will use the same cache
#    key: shared-key
#    paths:
#      - .cache/pip

# ======== test-unit-style ========

flake8:
  <<: *ci-image
  stage: static-analysis-build
  script:
    - tox -e flake8 --current-env

pylint:
  <<: *ci-image
  stage: static-analysis-build
  script:
    - tox -e pylint --current-env

unit-tests:
  <<: *ci-image
  <<: *postgresql
  stage: tests-it-promote
# # Currently, no shared runner, comment these code
#  artifacts:
#    name: unit-tests-coverage
#    paths:
#    - .coverage.*
#    expire_in: 30 days
  script:
    - tox -e unit --current-env

# ======== build-image  ========
build-ci-image:
  <<: *ci-image
  variables:
    PELC_PROJECT: "pelc2-dev"
  stage: build-ci-image
  only:
    changes:
      - ci-image/Dockerfile
    refs:
      - merge_requests
  before_script:
    - oc login "$OCP_ADDRESS" --token "$PELC_CI_TOKEN"
    - oc project $PELC_PROJECT
  after_script:
    - oc logout
  script:
    - oc start-build pelc2-ci
      -o name
      --commit "$CI_COMMIT_SHA"
      --follow --wait
      | tee output
    - oc get "$(head -n1 output)" -o jsonpath='{.status.output.to.imageDigest}' > image-digest.txt
    - if [ ! -s image-digest.txt ]; then
          echo "The image build not success, please rerun this step!!!"
          exit 1 ;
      fi
    #To avoid untagged image will be automatically deleted
    - skopeo copy
      --src-creds=$QUAY_USERNAME:$QUAY_TOKEN
      --dest-creds=$QUAY_USERNAME:$QUAY_TOKEN
      docker://quay.io/pelc/pelc2-ci@$(cat image-digest.txt)
      docker://quay.io/pelc/pelc2-ci:$CI_COMMIT_SHA

# ======== release-ci-image  ========

release-ci-image:
  <<: *ci-image
  variables:
    PELC_PROJECT: "pelc2-dev"
  only:
    changes:
      - ci-image/Dockerfile
    refs:
      - main
  stage: release-ci
  before_script:
    - oc login "$OCP_ADDRESS" --token "$PELC_CI_TOKEN"
    - oc project $PELC_PROJECT
  after_script:
    - oc logout
  script:
    - skopeo copy
      --src-creds=$QUAY_USERNAME:$QUAY_TOKEN
      --dest-creds=$QUAY_USERNAME:$QUAY_TOKEN
      docker://quay.io/pelc/pelc2-ci:$CI_COMMIT_SHA
      docker://quay.io/pelc/pelc2-ci:latest
