stages:
  # Build ci-image if dockerfile changed
  - build-ci-image

  # Run static analysis tools
  # build OpenLCS image
  - static-analysis-build

  # Run all test cases
  # Run unit and functional tests that do not require fully deployed OpenLCS 
  # Run integration tests need to deploy current branch to openlcs-ci
  - tests-it-promote

  # build openlcs dev image
  - build-dev-image

  # deploy openlcs dev image to dev env
  - deploy-to-dev

  # Release new version when tagged
  - release

variables:
  TOWER_HOST: https://tower.engineering.redhat.com
  OPENLCS_DATABASE_USER: postgres
  OPENLCS_DATABASE_PASSWORD: test
  OCP_ADDRESS: https://api.ocp-c1.prod.psi.redhat.com:6443
  CI_REGISTRY_IMAGE: quay.io/pelc/openlcs-ci
  OPENLCS_IMAGE: quay.io/pelc/openlcs
  PELC_CI_USER: pelc+pelc_ci_cd
  PELC_CI_PASSWORD: $pelc_ci_cd_password

  # For pgsql start param
  POSTGRESQL_DATABASE: openlcs
  POSTGRESQL_USER: 'openlcs'
  POSTGRES_HOST_AUTH_METHOD: trust
  POSTGRESQL_ADMIN_PASSWORD: 'test'
  POSTGRESQL_PASSWORD: 'test'

.ci-image: &ci-image
  image:
    name: $CI_REGISTRY_IMAGE:latest
  # the tags come from the labels of shared runner in 'gitlab.cee.redhat.com/pelc/openlcs/-/settings/ci_cd'
  tags:
    - pelc-docker-runner

.ansible-tower-cli-image: &ansible-tower-cli-image
  image:
    # Copy from perrit/ansible-tower-cli-container
    name: quay.io/pelc/ansible-tower-cli
  tags:
    - pelc-docker-runner

.postgresql: &postgresql
  services:
    - 'quay.io/pelc/postgresql-12'

# https://docs.gitlab.com/ee/ci/services/#starting-multiple-services-from-the-same-image
.api-services: &api-services
  services:
    - name: 'quay.io/pelc/postgresql-12'
      alias: postgres
    - name: 'quay.io/pelc/redis'
      alias: redis

.only-merge-requests: &only-merge-requests
  only:
    - merge_requests

.only-main: &only-main
  only:
    - main

.only-release: &only-release
  only:
    - tags

# ======== build-docker-ci  ========
# Image build will always be triggered, and will read cache from the latest tag image
build-ci-image:
  <<: *only-merge-requests
  tags:
    - pelc-shell-runner
  stage: build-ci-image
  script:
    - docker login -u="$PELC_CI_USER" -p=$PELC_CI_PASSWORD quay.io
    - cp containers/docker-ci/.dockerignore .
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#docker-caching-example
    # build and get local image sha id
    - LOCAL_IMAGE_SHA=`docker build  -q -f containers/docker-ci/Dockerfile .`;
    - REMOTE_IMAGE_SHA=`skopeo inspect --format {{.Digest}} docker://$CI_REGISTRY_IMAGE:latest 2> /dev/null`
    # If remote latest tag is not equal to current then
    # push current image to latest
    - >
        if [ $LOCAL_IMAGE_SHA = $REMOTE_IMAGE_SHA ]; then
          echo "Existing same image, nothing to do";
        else
          echo "Replace latest image"
          docker tag $LOCAL_IMAGE_SHA $CI_REGISTRY_IMAGE:latest;
          docker push $CI_REGISTRY_IMAGE:latest;
        fi
    - rm -f .dockerignore

# ======== static-analysis-build========
flake8:
  <<: *ci-image
  <<: *only-merge-requests
  stage: static-analysis-build
  script:
    - tox -e flake8 --current-env

pylint:
  <<: *ci-image
  <<: *only-merge-requests
  stage: static-analysis-build
  script:
    - tox -e pylint --current-env

# ======== tests-it-promote ========
unit-tests:
  <<: *ci-image
  <<: *postgresql
  <<: *only-merge-requests
  stage: tests-it-promote
  script:
    - tox -e unit --current-env

api-tests:
  <<: *ci-image
  <<: *api-services
  <<: *only-merge-requests
  stage: tests-it-promote
  script:
    - tox -e api --current-env

# ======== build-dev-image ========
build-dev-image:
  <<: *only-main
  tags:
    - pelc-shell-runner
  stage: build-dev-image
  script:
    - docker build -t $OPENLCS_IMAGE:dev -f containers/docker-openlcs/Dockerfile .;
    - docker login -u="$PELC_CI_USER" -p=$PELC_CI_PASSWORD quay.io
    - docker push $OPENLCS_IMAGE:dev

deploy-to-dev:
  <<: *ansible-tower-cli-image
  <<: *only-main
  stage: deploy-to-dev
  script:
   - tower-cli config verify_ssl false
   - >
      tower-cli job launch -J "OpenLCS deploy dev" --monitor --no-input --insecure
      -e "openlcs_image_tag: dev"
      -h "$TOWER_HOST" -t "$TOWER_TOKEN"

# ======== build-release-image ========
build-release-image:
  <<: *only-release
  tags:
   - pelc-shell-runner
  stage: release
  script:
    - docker build -t $OPENLCS_IMAGE:$CI_COMMIT_TAG -f containers/docker-openlcs/Dockerfile .;
    - docker login -u="$PELC_CI_USER" -p=$PELC_CI_PASSWORD quay.io
    - docker push $OPENLCS_IMAGE:$CI_COMMIT_TAG
